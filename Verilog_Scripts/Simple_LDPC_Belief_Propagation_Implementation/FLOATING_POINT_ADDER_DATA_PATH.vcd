$date
	Sun Feb 12 15:13:59 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module FLOATING_POINT_ADDER_TEST_BENCH $end
$var wire 32 ! out [31:0] $end
$var reg 32 " in1 [31:0] $end
$var reg 32 # in2 [31:0] $end
$scope module DUT $end
$var wire 32 $ in1 [31:0] $end
$var wire 32 % in2 [31:0] $end
$var wire 1 & sign_of_smaller_exponent $end
$var wire 1 ' sign_of_larger_exponent $end
$var wire 24 ( positive_shifted_mantissa [23:0] $end
$var wire 8 ) positive_shifted_exponent [7:0] $end
$var wire 32 * out [31:0] $end
$var wire 24 + negative_shifted_mantissa [23:0] $end
$var wire 8 , negative_shifted_exponent [7:0] $end
$var wire 5 - negative_exponent_shift [4:0] $end
$var wire 23 . mantissa_with_smaller_exponent [22:0] $end
$var wire 23 / mantissa_with_larger_exponent [22:0] $end
$var wire 24 0 mantissa_sum [23:0] $end
$var wire 23 1 mantissa2 [22:0] $end
$var wire 23 2 mantissa1 [22:0] $end
$var wire 8 3 larger_exponent [7:0] $end
$var wire 1 4 l $end
$var wire 1 5 is_result_zero $end
$var wire 24 6 input_mantissa_2 [23:0] $end
$var wire 24 7 input_mantissa_1 [23:0] $end
$var wire 24 8 final_mantissa [23:0] $end
$var wire 8 9 final_exponent [7:0] $end
$var wire 8 : exponent2 [7:0] $end
$var wire 8 ; exponent1 [7:0] $end
$var wire 8 < diff [7:0] $end
$var wire 1 = carry_out $end
$scope module find_number_of_leading_zeros_in_mantissa_sum $end
$var wire 5 > priority_encoder_output [4:0] $end
$var wire 24 ? in [23:0] $end
$var wire 1 5 all_zeros $end
$var reg 5 @ out [4:0] $end
$var reg 5 A storage_register [4:0] $end
$scope module find_position_of_first_1 $end
$var wire 24 B in [23:0] $end
$var reg 5 C out [4:0] $end
$upscope $end
$upscope $end
$scope module generate_added_mantissa_and_sign $end
$var wire 24 D input2_magnitude [23:0] $end
$var wire 1 E is_subtraction $end
$var wire 24 F result_magnitude_without_carry [23:0] $end
$var wire 1 ' input2_sign $end
$var wire 1 & input1_sign $end
$var wire 24 G input1_magnitude [23:0] $end
$var wire 1 = carry_out $end
$var reg 25 H result_magnitude [24:0] $end
$var reg 1 I result_sign $end
$upscope $end
$scope module generate_exponent_difference $end
$var wire 8 J exp1 [7:0] $end
$var wire 8 K exp2 [7:0] $end
$var wire 1 4 l $end
$var reg 8 L diff [7:0] $end
$upscope $end
$scope module generate_final_exponent $end
$var wire 1 = sel $end
$var wire 8 M in2 [7:0] $end
$var wire 8 N in1 [7:0] $end
$var reg 8 O out [7:0] $end
$upscope $end
$scope module generate_final_mantissa $end
$var wire 1 = sel $end
$var wire 24 P in2 [23:0] $end
$var wire 24 Q in1 [23:0] $end
$var reg 24 R out [23:0] $end
$upscope $end
$scope module generate_input_mantissa_1 $end
$var wire 8 S shift_factor [7:0] $end
$var wire 24 T out [23:0] $end
$var wire 23 U in [22:0] $end
$var wire 24 V before_shift [23:0] $end
$upscope $end
$scope module generate_negative_shifted_exponent $end
$var wire 5 W decr_value [4:0] $end
$var wire 8 X in [7:0] $end
$var reg 8 Y out [7:0] $end
$upscope $end
$scope module generate_negative_shifted_mantissa $end
$var wire 24 Z in [23:0] $end
$var wire 5 [ shift_factor [4:0] $end
$var reg 24 \ out [23:0] $end
$upscope $end
$scope module generate_positive_shifted_exponent $end
$var wire 8 ] in [7:0] $end
$var reg 8 ^ out [7:0] $end
$upscope $end
$scope module generate_positive_shifted_mantissa $end
$var wire 24 _ in [23:0] $end
$var wire 24 ` out [23:0] $end
$upscope $end
$scope module select_larger_exponent $end
$var wire 8 a in1 [7:0] $end
$var wire 8 b in2 [7:0] $end
$var wire 1 4 sel $end
$var reg 8 c out [7:0] $end
$upscope $end
$scope module select_mantissa_with_larger_exponent $end
$var wire 23 d in1 [22:0] $end
$var wire 23 e in2 [22:0] $end
$var wire 1 4 sel $end
$var reg 23 f out [22:0] $end
$upscope $end
$scope module select_mantissa_with_smaller_exponent $end
$var wire 23 g in1 [22:0] $end
$var wire 23 h in2 [22:0] $end
$var wire 1 4 sel $end
$var reg 23 i out [22:0] $end
$upscope $end
$scope module select_sign_of_larger_exponent $end
$var wire 1 j in1 $end
$var wire 1 k in2 $end
$var wire 1 4 sel $end
$var reg 1 ' out $end
$upscope $end
$scope module select_sign_of_smaller_exponent $end
$var wire 1 l in1 $end
$var wire 1 m in2 $end
$var wire 1 4 sel $end
$var reg 1 & out $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0m
0l
0k
0j
b0 i
b110011001100110011010 h
b0 g
b110011001100110011010 f
b0 e
b110011001100110011010 d
b1111111 c
b0 b
b1111111 a
b10011001100110011001101 `
b100110011001100110011010 _
b10000000 ^
b1111111 ]
b100110011001100110011010 \
b0 [
b100110011001100110011010 Z
b1111111 Y
b1111111 X
b0 W
b100000000000000000000000 V
b0 U
b0 T
b1111111 S
b100110011001100110011010 R
b100110011001100110011010 Q
b10011001100110011001101 P
b1111111 O
b1111111 N
b10000000 M
b1111111 L
b0 K
b1111111 J
0I
b100110011001100110011010 H
b0 G
b100110011001100110011010 F
0E
b100110011001100110011010 D
b11000 C
b100110011001100110011010 B
b11000 A
b0 @
b100110011001100110011010 ?
b11000 >
0=
b1111111 <
b1111111 ;
b0 :
b1111111 9
b100110011001100110011010 8
b0 7
b100110011001100110011010 6
05
04
b1111111 3
b110011001100110011010 2
b0 1
b100110011001100110011010 0
b110011001100110011010 /
b0 .
b0 -
b1111111 ,
b100110011001100110011010 +
b111111100110011001100110011010 *
b10000000 )
b10011001100110011001101 (
0'
0&
b0 %
b111111100110011001100110011010 $
b0 #
b111111100110011001100110011010 "
b111111100110011001100110011010 !
$end
